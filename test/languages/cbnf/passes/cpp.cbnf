// Copyright (c) 2017-2019 Cranium Software

pass "cpp" switch
{
    output language.name + "Grammar.cpp" ;
    
    write "// CP2::Parser definition for " + language.name + "\n\n" ;
    
    write "#define GE( ... ) GrammarExpression( __VA_ARGS__ )\n\n" ;

    grammar-variable = "kx" + language.name + "Grammar" ;
    write "const Grammar& Get" + language.name + "Grammar()\n" ;
    write "{\n" ;
    write "\tstatic Grammar kx" + grammar-variable + "Grammar(\n" ;
    write "\t{\n" ;

    for each production in language.productions
    {
        write "\t\tGrammarProduction(\"" + production.name + "\",\n" ;
        write "\t\t\t" ;
        join = "" ;
        
        for each production-name in production.names
        {
            write join ;
            if production-name.is-list
            {
                if production-name.is-non-empty
                {
                    write "+" ;
                }
                else
                {
                    write "!" ;
                }
            }
            else
            {
                if production-name.is-optional
                {
                    write "~" ;
                }
            }
            write "GE( \"" + production-name + "\" ) " ;
            join = "+ " ;
        }
        
        write "),\n" ;
    }

    write "\t});\n\n" ;
    
    write "\tif( " + grammar-variable + ".GetCommentCount() == 0 )\n"
        + "\t{\n"
        + "\t\t" + grammar-variable + ".SetName( \"" + language.name + "\" );\n" ;
    
    for each line-comment in language.line-comments
    {
        write "\t\t" + grammar-variable + ".AddLineComment( \"" + line-comment + "\" );\n" ;
    }

    for each block-comment in language.block-comments
    {
        start = block-comment[ 0 ] ;
        end = block-comment[ 1 ] ;
        write "\t\t" + grammar-variable + ".AddBlockComment( \"" + start + "\", \"" + end + "\" );\n" ;
    }

    for each string in language.quotes
    {
        start = string[ 0 ] ;
        end = string[ 1 ] ;
        escape = string[ 2 ] ;
        write "\t\t" + grammar-variable + ".AddQuote( \""
            + string.input-name + "\","
            + "\"" + start + "\","
            + "\"" + end + "\","
            + "\"" + escape + "\" );\n" ;
    }

    write "\t}\n" ;

    write "#undef GE\n\n" ;
    
    write "\treturn " + grammar-variable + ";\n" ;
    write "\}\n" ;
}
