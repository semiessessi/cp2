// CBNF grammar definition for CBNF

language "CBNF" ;

lexeme "separators" separators
lexeme "keywords" keywords
lexeme "identifiers" identifiers
lexeme "{" {
lexeme "operators" operators
lexeme "strings" strings
lexeme "terminators" terminators
lexeme "}" }
lexeme identifier [_a-zA-Z][_-a-zA-Z0-9]*
lexeme "?" ?
lexeme "comment" comment
lexeme "+" +
lexeme ";" ;
lexeme "quote" quote
lexeme "lexeme" lexeme
lexeme "=" =
lexeme "..." ...
lexeme "*" *
lexeme "operators" operators
lexeme "+" +
lexeme "input-name" input-name
lexeme "." .
lexeme "name" name
lexeme "productions" productions
lexeme "language" language
lexeme "keywords" keywords
lexeme "identifiers" identifiers
lexeme "terminators" terminators
lexeme "separators" separators
lexeme "strings" strings
lexeme "quotes" quotes
lexeme "lexemes" lexemes
lexeme "line-comments" line-comments
lexeme "names" names
lexeme "block-comments" block-comments
lexeme "is-optional" is-optional
lexeme "is-non-empty" is-non-empty
lexeme "is-list" is-list
lexeme "true" true
lexeme "false" false


grammar = statement* ;
statement = production ;
statement = "keywords" terminal-list ;
statement = "identifiers" terminal-list ;
statement = "operators" terminal-list ;
statement = "separators" terminal-list ;
statement = "terminators" terminal-list ;
statement = "strings" terminal-list ;
statement = pass-definition ;
terminal-list = "{" terminal* "}" ;
terminal = identifier ;
terminal = string ;
production = "comment" string ";" ;
production = "comment" string string ";" ;
production = "quote" identifier string string string ";" ;
production = "lexeme" identifier string ";" ;
production = identifier "=" rule-expression* ";" ;
production = identifier "=" "..." ";" ;
rule-expression = string ;
rule-expression = identifier ;
rule-expression = identifier "*" ;
rule-expression = identifier "?" ;
rule-expression = identifier "+" ;
string-expression = string ;
string-expression = identifier ;
string-expression = boolean-expression ;
string-expression = string-expression "+" string-expression ;
string-expression = identifier "." "name" ;
string-expression = "language" "." "name" ;
string-expression = identifier "." "input-name" ;
array-expression = "language" "." "productions" ;
array-expression = identifier "." "productions" ;
array-expression = "language" "." "keywords" ;
array-expression = identifier "." "keywords" ;
array-expression = "language" "." "identifiers" ;
array-expression = identifier "." "identifiers" ;
array-expression = "language" "." "operators" ;
array-expression = identifier "." "operators" ;
array-expression = "language" "." "terminators" ;
array-expression = identifier "." "terminators" ;
array-expression = "language" "." "separators" ;
array-expression = identifier "." "separators" ;
array-expression = "language" "." "strings" ;
array-expression = identifier "." "strings" ;
array-expression = "language" "." "quotes" ;
array-expression = identifier "." "quotes" ;
array-expression = "language" "." "lexemes" ;
array-expression = identifier "." "lexemes" ;
array-expression = "language" "." "line-comments" ;
array-expression = identifier "." "line-comments" ;
array-expression = "language" "." "block-comments" ;
array-expression = identifier "." "block-comments" ;
array-expression = identifier "." "names" ;
boolean-expression = identifier "." "is-optional" ;
boolean-expression = identifier "." "is-non-empty" ;
boolean-expression = identifier "." "is-list" ;
boolean-expression = "true" ;
boolean-expression = "false" ;

keywords
{
	"keywords"
	"identifiers"
	"operators"
	"separators"
	"terminators"
	"strings"
	"language"
	"comment"
	"quote"
	"lexeme"
	"pass"
	"requires"
	"output"
	"switch"
	"write"
	"name"
	"for"
	"each"
	"in"
	"productions"
	"names"
	"is-optional"
	"is-non-empty"
	"is-list"
	"true"
	"false"
	"input-name"
	"quotes"
	"lexemes"
	"block-comments"
	"line-comments"
}

identifiers
{
	identifier
}

operators
{
	"="
	"{"
	"}"
	"*"
	"+"
	"?"
	"."
}

separators
{
}

terminators
{
	";"
}

strings
{
	string
}
