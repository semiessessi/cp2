// CBNF grammar definition for CBNF

language "CBNF" ;

comment "//" ;
comment "/*" "*/" ;

lexeme identifier "[_a-zA-Z][_\\-a-zA-Z0-9]*" ;
lexeme integer "0-9*" ;

quote string "\"" "\"" "\\" ;

grammar = statement* ;

statement = production ;
statement = "keywords" terminal-list ;
statement = "identifiers" terminal-list ;
statement = "operators" terminal-list ;
statement = "separators" terminal-list ;
statement = "terminators" terminal-list ;
statement = "strings" terminal-list ;
statement = pass-definition ;

terminal-list = "{" terminal* "}" ;

terminal = identifier ;
terminal = string ;

production = "comment" string ";" ;
production = "comment" string string ";" ;
production = "quote" identifier string string string ";" ;
production = "lexeme" identifier string ";" ;
production = identifier "=" rule-expression* ";" ;
production = identifier "=" "..." ";" ;

rule-expression = string ;
rule-expression = identifier ;
rule-expression = identifier "*" ;
rule-expression = identifier "?" ;
rule-expression = identifier "+" ;

string-expression = string ;
string-expression = identifier ;

integer-expression = integer ;

string-expression = string-expression "+" string-expression ;
string-expression = string-expression "-" string-expression ;
string-expression = identifier "." "name" ;
string-expression = "language" "." "name" ;
string-expression = identifier "." "input-name" ;
string-expression = string-expression "." "lower-case" ;
string-expression = string-expression "." "quote-stripped" ;
string-expression = string-expression "." "regex-escaped" ;
string-expression = string-expression "." "double-regex-escaped" ;
string-expression = array-expression "[" integer-expression "]" ;

array-expression = "language" "." "productions" ;
array-expression = identifier "." "productions" ;
array-expression = "language" "." "keywords" ;
array-expression = identifier "." "keywords" ;
array-expression = "language" "." "identifiers" ;
array-expression = identifier "." "identifiers" ;
array-expression = "language" "." "operators" ;
array-expression = identifier "." "operators" ;
array-expression = "language" "." "terminators" ;
array-expression = identifier "." "terminators" ;
array-expression = "language" "." "separators" ;
array-expression = identifier "." "separators" ;
array-expression = "language" "." "strings" ;
array-expression = identifier "." "strings" ;
array-expression = "language" "." "quotes" ;
array-expression = identifier "." "quotes" ;
array-expression = "language" "." "lexemes" ;
array-expression = identifier "." "lexemes" ;
array-expression = "language" "." "line-comments" ;
array-expression = identifier "." "line-comments" ;
array-expression = "language" "." "block-comments" ;
array-expression = identifier "." "block-comments" ;
array-expression = "language" "." "passes" ;
array-expression = identifier "." "passes" ;
array-expression = identifier "." "names" ;
array-expression = identifier ;

boolean-expression = string-expression "==" string-expression ;
boolean-expression = boolean-expression "==" boolean-expression ;
boolean-expression = identifier "." "is-optional" ;
boolean-expression = identifier "." "is-non-empty" ;
boolean-expression = identifier "." "is-list" ;
boolean-expression = "true" ;
boolean-expression = "false" ;
boolean-expression = identifier ;

parse-expression = identifier "." "parse" ;
parse-expression = identifier ;

keywords
{
	"keywords"
	"identifiers"
	"operators"
	"separators"
	"terminators"
	"strings"
	"language"
	"comment"
	"quote"
	"lexeme"
	"pass"
	"requires"
	"output"
	"switch"
	"write"
	"name"
	"for"
	"each"
	"in"
	"productions"
	"names"
	"is-optional"
	"is-non-empty"
	"is-list"
	"true"
	"false"
	"input-name"
	"quotes"
	"lexemes"
	"block-comments"
	"line-comments"
	"passes"
	"parse"
	"walk"
	"as"
	"lower-case"
	"quote-stripped"
	"regex-escaped"
	"double-regex-escaped"
}

identifiers
{
	identifier
}

operators
{
	"="
	"{"
	"}"
	"["
	"]"
	"*"
	"+"
	"-"
	"?"
	"."
	"=="
}

separators
{
}

terminators
{
	";"
}

strings
{
	string
}

pass "cpp"

{ 
    output language .name + "Grammar.cpp" ;
    write "// CP2::Parser definition for " + language .name + "\n\n" ;
    write "#define GE( ... ) GrammarExpression( __VA_ARGS__ )\n\n" ;
    grammar-variable = "kx" + language .name + "Grammar" ;
    write "const Grammar& Get" + language .name + "Grammar()\n" ;
    write "{\n" ;
    write "\tstatic Grammar kx" + grammar-variable + "Grammar(\n" ;
    write "\t{\n" ;
    for each production in language .productions 
    { 
        write "\t\tGrammarProduction(\"" + production .name + "\",\n" ;
        write "\t\t\t" ;
        join = "" ;
        for each production-name in production .names 
        { 
            write join ;
            if production-name .is-list 
            { 
                if production-name .is-non-empty 
                { 
                    write "+" ;
                } 
                else 
                { 
                    write "!" ;
                } 
            } 
            else 
            { 
                if production-name .is-optional 
                { 
                    write "~" ;
                } 
            } 
            write "GE( \"" + production-name + "\" ) " ;
            join = "+ " ;
        } 
        write "),\n" ;
    } 
    write "\t});\n\n" ;
    write "\tif( " + grammar-variable + ".GetCommentCount() == 0 )\n" + "\t{\n" + "\t\t" + grammar-variable + ".SetName( \"" + language .name + "\" );\n" ;
    for each line-comment in language .line-comments 
    { 
        write "\t\t" + grammar-variable + ".AddLineComment( \"" + line-comment + "\" );\n" ;
    } 
    for each block-comment in language .block-comments 
    { 
        start = block-comment [ 0 ] ;
        end = block-comment [ 1 ] ;
        write "\t\t" + grammar-variable + ".AddBlockComment( \"" + start + "\", \"" + end + "\" );\n" ;
    } 
    for each string in language .quotes 
    { 
        start = string [ 0 ] ;
        end = string [ 1 ] ;
        escape = string [ 2 ] ;
        write "\t\t" + grammar-variable + ".AddQuote( \"" + string .input-name + "\", " + "\"" + start + "\", " + "\"" + end + "\", " + "\"" + escape + "\" );\n" ;
    } 
    for each value in language .lexemes 
    { 
        if value .is-optional 
        { 
        } 
        else 
        { 
            write "\t\t" + grammar-variable + ".AddLexeme( \"" + value .name + "\", \"" + value .quote-stripped ;
            write "\" );\n" ;
        } 
    } 
    for each keyword in language .keywords 
    { 
        write "\t\t" + grammar-variable + ".AddKeyword( \"\\\"" + keyword .quote-stripped ;
        write "\\\"\" );\n" ;
    } 
    for each operator in language .operators 
    { 
        write "\t\t" + grammar-variable + ".AddOperator( \"\\\"" + operator .quote-stripped ;
        write "\\\"\" );\n" ;
    } 
    for each terminator in language .terminators 
    { 
        write "\t\t" + grammar-variable + ".AddTerminator( \"\\\"" + terminator .quote-stripped ;
        write "\\\"\" );\n" ;
    } 
    for each separator in language .separators 
    { 
        write "\t\t" + grammar-variable + ".AddSeparator( \"\\\"" + separator .quote-stripped ;
        write "\\\"\" );\n" ;
    } 
    for each string in language .strings 
    { 
        write "\t\t" + grammar-variable + ".AddString( \"" + string + "\" );\n" ;
    } 
    for each identifier in language .identifiers 
    { 
        write "\t\t" + grammar-variable + ".AddIdentifier( \"" + identifier + "\" );\n" ;
    } 
    write "\t}\n" ;
    write "#undef GE\n\n" ;
    write "\treturn " + grammar-variable + ";\n" ;
    write "\}\n" ;
} 

pass "cbnf"

{ 
    output language .name + ".cbnf" ;
    write "// CBNF grammar definition for " + language .name + "\n\n" ;
    write "language \"" + language .name + "\" ;\n\n" ;
    for each value in language .line-comments 
    { 
        write "comment \"" + value + "\" ;\n" ;
    } 
    for each value in language .block-comments 
    { 
        write "comment " ;
        for each part in value 
        { 
            write "\"" + part + "\" " ;
        } 
        write ";\n" ;
    } 
    write "\n" ;
    for each value in language .lexemes 
    { 
        if value .is-optional 
        { 
        } 
        else 
        { 
            write "lexeme " + value .name + " " + value + " ;\n" ;
        } 
    } 
    write "\n" ;
    for each value in language .quotes 
    { 
        write "quote " + value .name + " " ;
        for each part in value 
        { 
            write "\"" + part + "\" " ;
        } 
        write ";\n" ;
    } 
    last = "" ;
    for each production in language .productions 
    { 
        if production .input-name == last 
        { 
        } 
        else 
        { 
            write "\n" ;
        } 
        last = production .input-name ;
        write production .input-name + " = " ;
        join = "" ;
        for each production-name in production .names 
        { 
            write join ;
            write production-name .input-name ;
            if production-name .is-list 
            { 
                if production-name .is-non-empty 
                { 
                    write "+" ;
                } 
                else 
                { 
                    write "*" ;
                } 
            } 
            else 
            { 
                if production-name .is-optional 
                { 
                    write "?" ;
                } 
            } 
            join = " " ;
        } 
        write " ;\n" ;
    } 
    write "\n" ;
    write "keywords\n" ;
    write "{\n" ;
    for each value in language .keywords 
    { 
        write "\t" + value + "\n" ;
    } 
    write "}\n\n" ;
    write "identifiers\n" ;
    write "{\n" ;
    for each value in language .identifiers 
    { 
        write "\t" + value + "\n" ;
    } 
    write "}\n\n" ;
    write "operators\n" ;
    write "{\n" ;
    for each value in language .operators 
    { 
        write "\t" + value + "\n" ;
    } 
    write "}\n\n" ;
    write "separators\n" ;
    write "{\n" ;
    for each value in language .separators 
    { 
        write "\t" + value + "\n" ;
    } 
    write "}\n\n" ;
    write "terminators\n" ;
    write "{\n" ;
    for each value in language .terminators 
    { 
        write "\t" + value + "\n" ;
    } 
    write "}\n\n" ;
    write "strings\n" ;
    write "{\n" ;
    for each value in language .strings 
    { 
        write "\t" + value + "\n" ;
    } 
    write "}\n" ;
    for each compiler-pass in language .passes 
    { 
        write "\npass " + "\"" + compiler-pass .name + "\"\n" ;
        tab-prefix = "" ;
        current-prefix = "" ;
        walk compiler-pass .parse as node 
        { 
            if node .is-list 
            { 
            } 
            else 
            { 
                if node == "." 
                { 
                    write "." ;
                } 
                else 
                { 
                    if node == ";" 
                    { 
                        write node + "\n" ;
                        current-prefix = tab-prefix ;
                    } 
                    else 
                    { 
                        if node == "{" 
                        { 
                            write "\n" ;
                            current-prefix = tab-prefix ;
                            tab-prefix = tab-prefix + "    " ;
                        } 
                        if node == "}" 
                        { 
                            tab-prefix = tab-prefix - "    " ;
                            current-prefix = tab-prefix ;
                        } 
                        write current-prefix + node + " " ;
                        current-prefix = "" ;
                        if node == "{" 
                        { 
                            write "\n" ;
                            current-prefix = tab-prefix ;
                        } 
                        if node == "}" 
                        { 
                            write "\n" ;
                            current-prefix = tab-prefix ;
                        } 
                    } 
                } 
            } 
        } 
    } 
} 

pass "vscode"

{ 
    lower-case-name = language .name .lower-case ;
    output "vscode/.vscodeignore" ;
    write ".vscode/**\n" ;
    write ".vscode-test/**\n" ;
    write ".gitignore\n" ;
    write "vsc-extension-quickstart.md\n" ;
    write "\n" ;
    output "vscode/language-configuration.json" ;
    write "{\n" ;
    write "\t\"comments\": {\n" ;
    for each value in language .line-comments 
    { 
        write "\t\t\"lineComment\": \"" + value + "\",\n" ;
    } 
    for each value in language .block-comments 
    { 
        write "\t\t\"blockComment\": [" ;
        blockString = "" ;
        for each part in value 
        { 
            blockString = blockString + " \"" + part + "\"," ;
        } 
        write blockString - "," ;
        write " ]\n" ;
    } 
    write "\t}\n" ;
    write "}\n" ;
    output "vscode/package.json" ;
    write "{\n" ;
    write "    \"name\": \"" + language .name .lower-case ;
    write "\",\n" ;
    write "    \"displayName\": \"" + language .name + "\",\n" ;
    write "    \"description\": \"" + language .name + " for Visual Studio Code\",\n" ;
    write "    \"version\": \"0.0.1\",\n" ;
    write "    \"engines\": {\n" ;
    write "        \"vscode\": \"^1.38.0\"\n" ;
    write "    },\n" ;
    write "    \"categories\": [\n" ;
    write "        \"Programming Languages\"\n" ;
    write "    ],\n" ;
    write "    \"contributes\": {\n" ;
    write "        \"languages\": [{\n" ;
    write "            \"id\": \"" + language .name .lower-case ;
    write "\",\n" ;
    write "            \"aliases\": [\"" + language .name + "\", \"" + lower-case-name + "\"],\n" ;
    write "            \"extensions\": [\"." + language .name .lower-case ;
    write "\"],\n" ;
    write "            \"configuration\": \"./language-configuration.json\"\n" ;
    write "        }],\n" ;
    write "        \"grammars\": [{\n" ;
    write "            \"language\": \"" + lower-case-name + "\",\n" ;
    write "            \"scopeName\": \"source." + language .name .lower-case ;
    write "\",\n" ;
    write "            \"path\": \"./syntaxes/" + language .name .lower-case ;
    write ".tmLanguage.json\"\n" ;
    write "        }]\n" ;
    write "    }\n" ;
    write "}\n" ;
    output "vscode/CHANGELOG.md" ;
    write "# Change Log\n\n" ;
    write "All notable changes to the \"" + language .name + "\" extension will be documented in this file.\n\n" ;
    write "Check [Keep a Changelog](http://keepachangelog.com/) for recommendations on how to structure this file.\n\n" ;
    write "## [Unreleased]\n\n" ;
    write "- Initial release\n" ;
    output "vscode/README.md" ;
    write "# " + language .name + " README\n\n" ;
    write "This is the README for your extension \"" + language .name + "\". After writing up a brief description, we recommend including the following sections.\n\n" + "## Features\n" + "\n" + "Describe specific features of your extension including screenshots of your extension in action. Image paths are relative to this README file.\n" + "\n" + "For example if there is an image subfolder under your extension project workspace:\n" + "\n" + "\!\[feature X\]\(images/feature-x.png\)\n" + "\n" + "> Tip: Many popular extensions utilize animations. This is an excellent way to show off your extension! We recommend short, focused animations that are easy to follow.\n" + "\n" + "## Requirements\n" + "\n" + "If you have any requirements or dependencies, add a section describing those and how to install and configure them.\n" + "\n" + "## Extension Settings\n" + "\n" + "Include if your extension adds any VS Code settings through the `contributes.configuration` extension point.\n" + "\n" + "For example:\n" + "\n" + "This extension contributes the following settings:\n" + "\n" + "* `myExtension.enable`: enable/disable this extension\n" + "* `myExtension.thing`: set to `blah` to do something\n" + "\n" + "## Known Issues\n" + "\n" + "Calling out known issues can help limit users opening duplicate issues against your extension.\n" + "\n" + "## Release Notes\n" + "\n" + "Users appreciate release notes as you update your extension.\n" + "\n" + "### 1.0.0\n" + "\n" + "Initial release of ...\n" + "\n" + "### 1.0.1\n" + "\n" + "Fixed issue #.\n" + "\n" + "### 1.1.0\n" + "\n" + "Added features X, Y, and Z.\n" + "\n" + "-----------------------------------------------------------------------------------------------------------\n" + "\n" + "## Working with Markdown\n" + "\n" + "**Note:** You can author your README using Visual Studio Code.  Here are some useful editor keyboard shortcuts:\n" + "\n" + "* Split the editor (`Cmd+\` on macOS or `Ctrl+\` on Windows and Linux)\n" + "* Toggle preview (`Shift+CMD+V` on macOS or `Shift+Ctrl+V` on Windows and Linux)\n" + "* Press `Ctrl+Space` (Windows, Linux) or `Cmd+Space` (macOS) to see a list of Markdown snippets\n" + "\n" + "### For more information\n" + "\n" + "* [Visual Studio Code's Markdown Support](http://code.visualstudio.com/docs/languages/markdown)\n" + "* [Markdown Syntax Reference](https://help.github.com/articles/markdown-basics/)\n" + "\n" + "**Enjoy!**\n" ;
    output "vscode/vsc-extension-quickstart.md" ;
    write "# Welcome to your VS Code Extension\n" + "\n" + "## What's in the folder\n" + "\n" + "* This folder contains all of the files necessary for your extension.\n" + "* `package.json` - this is the manifest file in which you declare your language support and define the location of the grammar file that has been copied into your extension.\n" + "* `syntaxes/" + language .name + ".tmLanguage.json` - this is the Text mate grammar file that is used for tokenization.\n" + "* `language-configuration.json` - this is the language configuration, defining the tokens that are used for comments and brackets.\n" + "\n" + "## Get up and running straight away\n" + "\n" + "* Make sure the language configuration settings in `language-configuration.json` are accurate.\n" + "* Press `F5` to open a new window with your extension loaded.\n" + "* Create a new file with a file name suffix matching your language.\n" + "* Verify that syntax highlighting works and that the language configuration settings are working.\n" + "\n" + "## Make changes\n" + "\n" + "* You can relaunch the extension from the debug toolbar after making changes to the files listed above.\n" + "* You can also reload (`Ctrl+R` or `Cmd+R` on Mac) the VS Code window with your extension to load your changes.\n" + "\n" + "## Add more language features\n" + "\n" + "* To add features such as intellisense, hovers and validators check out the VS Code extenders documentation at https://code.visualstudio.com/docs\n" + "\n" + "## Install your extension\n" + "\n" + "* To start using your extension with Visual Studio Code copy it into the `<user home>/.vscode/extensions` folder and restart Code.\n" + "* To share your extension with the world, read on https://code.visualstudio.com/docs about publishing an extension.\n" ;
    output "vscode/.vscode/launch.json" ;
    write "// A launch configuration that launches the extension inside a new window\n" + "// Use IntelliSense to learn about possible attributes.\n" + "// Hover to view descriptions of existing attributes.\n" + "// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n" + "{\n" + "	\"version\": \"0.2.0\",\n" + "    \"configurations\": [\n" + "        {\n" + "            \"name\": \"Extension\",\n" + "            \"type\": \"extensionHost\",\n" + "            \"request\": \"launch\",\n" + "            \"runtimeExecutable\": \"${execPath}\",\n" + "            \"args\": [\n" + "                \"--extensionDevelopmentPath=${workspaceFolder}\"\n" + "            ]\n" + "        }\n" + "    ]\n" + "}" ;
    output "vscode/syntaxes/" + lower-case-name + ".tmLanguage.json" ;
    write "{\n" + "    \"$schema\": \"https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json\",\n" + "    \"name\": \"" + language .name + "\",\n" + "    \"patterns\": [\n" + "        {\n" + "            \"include\": \"#keywords\"\n" + "        },\n" + "        {\n" + "            \"include\": \"#line-comment\"\n" + "        },\n" + "        {\n" + "            \"include\": \"#block-comment\"\n" + "        },\n" ;
    for each value in language .lexemes 
    { 
        if value .is-optional 
        { 
        } 
        else 
        { 
            stripped = value .name .quote-stripped ;
            write "        {\n" + "            \"include\": \"#" + stripped + "\"\n" + "        },\n" ;
        } 
    } 
    for each string in language .quotes 
    { 
        write "        {\n" + "            \"include\": \"#" + string .name + "\"\n" + "        }\n" ;
    } 
    write "    ],\n" + "    \"repository\": {\n" + "        \"keywords\": {\n" + "            \"patterns\": [{\n" + "                \"name\": \"keyword." + lower-case-name + "\",\n" + "                \"match\": \"\\\\b(" ;
    keywordMatcher = "" ;
    for each keyword in language .keywords 
    { 
        stripped = keyword .quote-stripped ;
        stripped = stripped .double-regex-escaped ;
        keywordMatcher = keywordMatcher + stripped + "|" ;
    } 
    write keywordMatcher - "|" ;
    write ")\\\\b\"\n" + "            }]\n" + "        },\n" ;
    for each value in language .lexemes 
    { 
        if value .is-optional 
        { 
        } 
        else 
        { 
            stripped = value .name .quote-stripped ;
            write "        \"" + stripped + "\": {\n" + "            \"patterns\": [{\n" + "                \"name\": \"lexeme." + stripped + "." + lower-case-name + "\",\n" + "                \"match\": \"\\\\b(" ;
            write value .quote-stripped ;
            write ")\\\\b\"\n" + "            }]\n" + "        },\n" ;
        } 
    } 
    string-values = "" ;
    for each string-definition in language .quotes 
    { 
        first-quote = string-definition [ 0 ] ;
        second-quote = string-definition [ 1 ] ;
        escape = string-definition [ 2 ] ;
        string-values = string-values + "        \"" + string-definition .name + "\": {\n" + "            \"name\": \"string.quotes." + string-definition .name + "." + lower-case-name + "\",\n" + "            \"begin\": \"" ;
        string-values = string-values + first-quote ;
        string-values = string-values + "\",\n" + "            \"end\": \"" ;
        string-values = string-values + second-quote ;
        string-values = string-values + "\",\n" + "            \"patterns\": [\n" + "                {\n" + "                    \"name\": \"constant.character.escape." + string-definition .name + "." + lower-case-name + "\",\n" + "                    \"match\": \"" ;
        string-values = string-values + escape ;
        string-values = string-values + "\\\\.\"\n" + "                }\n" + "            ]\n" + "        },\n" ;
    } 
    write string-values ;
    line-comment-values = "" ;
    for each line-comment in language .line-comments 
    { 
        line-comment-values = line-comment-values + "        \"line-comment\": {\n" + "            \"name\": \"comment.line." + lower-case-name + "\",\n" + "            \"begin\": \"" ;
        line-comment-values = line-comment-values + line-comment ;
        line-comment-values = line-comment-values + "\",\n" + "            \"end\": \"\\n\",\n" + "            \"patterns\": []\n" + "        },\n" ;
    } 
    write line-comment-values ;
    block-comment-values = "" ;
    for each block-comment in language .block-comments 
    { 
        block-comment-values = block-comment-values + "        \"block-comment\": {\n" + "            \"name\": \"comment.block." + lower-case-name + "\",\n" + "            \"begin\": \"" ;
        block-comment-values = block-comment-values + block-comment [ 0 ] .double-regex-escaped ;
        block-comment-values = block-comment-values + "\",\n" + "            \"end\": \"" + block-comment [ 1 ] .double-regex-escaped ;
        block-comment-values = block-comment-values + "\",\n" + "            \"patterns\": []\n" + "        },\n" ;
    } 
    write block-comment-values - ",\n" ;
    write "\n" + "},\n" + "    \"scopeName\": \"source." + lower-case-name + "\"\n" + "}\n" ;
} 
