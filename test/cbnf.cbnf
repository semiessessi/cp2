// CBNF grammar definition for CBNF

language "CBNF" ;

comment "//" ;
comment "/*" "*/" ;

lexeme identifier "[_a-zA-Z][_\\-a-zA-Z0-9]*" ;

quote string "\"" "\"" "\\" ;

grammar = statement* ;

statement = production ;
statement = "keywords" terminal-list ;
statement = "identifiers" terminal-list ;
statement = "operators" terminal-list ;
statement = "separators" terminal-list ;
statement = "terminators" terminal-list ;
statement = "strings" terminal-list ;
statement = pass-definition ;

terminal-list = "{" terminal* "}" ;

terminal = identifier ;
terminal = string ;

production = "comment" string ";" ;
production = "comment" string string ";" ;
production = "quote" identifier string string string ";" ;
production = "lexeme" identifier string ";" ;
production = identifier "=" rule-expression* ";" ;
production = identifier "=" "..." ";" ;

rule-expression = string ;
rule-expression = identifier ;
rule-expression = identifier "*" ;
rule-expression = identifier "?" ;
rule-expression = identifier "+" ;

keywords
{
	"keywords"
	"identifiers"
	"operators"
	"separators"
	"terminators"
	"strings"
	"language"
	"comment"
	"quote"
	"lexeme"
	"pass"
	"requires"
	"output"
	"switch"
	"write"
	"name"
	"for"
	"each"
	"in"
	"productions"
	"names"
	"is-optional"
	"is-non-empty"
	"is-list"
	"true"
	"false"
	"input-name"
	"quotes"
	"lexemes"
	"block-comments"
	"line-comments"
}

identifiers
{
	identifier
}

operators
{
	"="
	"{"
	"}"
	"*"
	"+"
	"?"
	"."
	"=="
}

separators
{
}

terminators
{
	";"
}

strings
{
	string
}
